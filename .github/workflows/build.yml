name: Build
on:
  pull_request:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      release:
        description: "Create a release"
        required: false
        default: false
        type: boolean
      environment:
        type: choice
        required: true
        default: "staging"
        options:
          - staging
          - production

env:
  NODE_VERSION: 22
  FLYCTL_VERSION: 0.3.55
  FRONTEND_INTERNAL_PORT: 3000
  CMS_INTERNAL_PORT: 3001
  MEDIA_S3_REGION: eu-west-3

jobs:
  version:
    name: "Generate version"
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      version_with_sha: ${{ steps.get-version.outputs.version_with_sha }}
      should_release: ${{ steps.get-version.outputs.should_release }}
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - name: Install dependencies
        run: pnpm --filter releaser install
      - name: Get version
        id: get-version
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -q '!release'; then
            echo "ðŸ”” Found !release"
            echo "SHOULD_RELEASE=true" >> "$GITHUB_OUTPUT"
          else
            echo "SHOULD_RELEASE=false" >> "$GITHUB_OUTPUT"
          fi
          VERSION=$(pnpm --filter releaser start get-version $([[ $SHOULD_RELEASE == 'true' ]] && echo '--release') | tail -n1)
          SHA=$(git rev-parse --short HEAD)
          VERSION_WITH_SHA="$VERSION-$SHA"
          echo "Version is: $VERSION"
          echo "Version (incl. SHA) is: $VERSION_WITH_SHA"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "version_with_sha=$VERSION_WITH_SHA" >> "$GITHUB_OUTPUT"
          echo "should_release=$SHOULD_RELEASE" >> "$GITHUB_OUTPUT"

  frontend-lint:
    name: "Frontend: Lint"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Install dependencies
        run: pnpm --filter frontend install
      - name: Run lint in frontend
        run: pnpm --filter frontend lint --max-warnings=0

  frontend-check-format:
    name: "Frontend: Check Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Install dependencies
        run: pnpm --filter frontend install
      - name: Check format in frontend
        run: pnpm --filter frontend check-format

  frontend-typecheck:
    name: "Frontend: Typecheck"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Install dependencies
        run: pnpm --filter frontend install
      - name: Populate CMS types
        uses: ./.github/actions/populate-cms-types
      - name: Run typecheck in frontend
        run: pnpm --filter frontend typecheck

  frontend-unit-tests:
    name: "Frontend: Unit Tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Install dependencies
        run: pnpm --filter frontend install
      - name: Populate CMS types
        uses: ./.github/actions/populate-cms-types
      - name: Run unit tests in frontend
        run: pnpm --filter frontend test

  frontend-build-push:
    name: "Frontend: Build and Push"
    runs-on: ubuntu-latest
    needs: [version]
    outputs:
      image: ${{ steps.image-name.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: ${{ env.FLYCTL_VERSION }}
      - name: Setup
        uses: ./.github/actions/setup
      - name: Set version on frontend
        run: |
          pnpm version ${{ needs.version.outputs.version }} --git-tag-version false
        working-directory: apps/frontend
      - name: Populate CMS types
        uses: ./.github/actions/populate-cms-types
      - name: Get frontend image name
        id: image-name
        run: |
          IMAGE_NAME=fxmk-frontend-staging
          IMAGE_TAG=v${{ needs.version.outputs.version_with_sha }}
          echo "image_name=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "image=registry.fly.io/$IMAGE_NAME:$IMAGE_TAG" >> "$GITHUB_OUTPUT"
      - name: Build and push frontend Docker image
        run: |
          flyctl deploy \
            --app ${{ steps.image-name.outputs.image_name }} \
            --config apps/frontend/fly.staging.toml \
            --build-only \
            --image-label ${{ steps.image-name.outputs.image_tag }} \
            --label org.opencontainers.image.version=${{ steps.image-name.outputs.image_tag }} \
            --push \
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  frontend-deploy:
    name: "Frontend: Deploy"
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs:
      - frontend-build-push
      - frontend-check-format
      - frontend-lint
      - frontend-typecheck
      - frontend-unit-tests
      - define-env
    environment:
      name: ${{ needs.define-env.outputs.environment }}-frontend
      url: https://${{ needs.define-env.outputs.canonical_hostname_frontend }}/
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: .
      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: ${{ env.FLYCTL_VERSION }}
      - name: Deploy frontend
        run: |
          flyctl deploy \
            --app ${{ needs.define-env.outputs.fly_app_frontend }} \
            --config apps/frontend/${{ needs.define-env.outputs.fly_config }} \
            --image ${{ needs.frontend-build-push.outputs.image }} \
            --env CANONICAL_HOSTNAME=${{ needs.define-env.outputs.canonical_hostname_frontend }} \
            --env PAYLOAD_CMS_BASE_URL=https://${{ needs.define-env.outputs.canonical_hostname_cms }} \
            --env IMAGEKIT_BASE_URL=${{ needs.define-env.outputs.imagekit_base_url }} \
            --env ANALYTICS_DOMAIN=${{ needs.define-env.outputs.analytics_domain_frontend }} \
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  cms-lint:
    name: "CMS: Lint"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Install dependencies
        run: pnpm --filter cms install
      - name: Run lint
        run: pnpm --filter cms lint --max-warnings=0

  cms-check-format:
    name: "CMS: Check Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup
        uses: ./.github/actions/setup
      - name: Install dependencies
        run: pnpm --filter cms install
      - name: Check format in frontend
        run: pnpm --filter cms check-format

  cms-build-push:
    name: "CMS: Build and Push"
    runs-on: ubuntu-latest
    needs: [version]
    outputs:
      image: ${{ steps.image-name.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: ${{ env.FLYCTL_VERSION }}
      - name: Setup
        uses: ./.github/actions/setup
      - name: Set version on CMS
        run: |
          pnpm version ${{ needs.version.outputs.version }} --git-tag-version false
        working-directory: apps/cms
      - name: Get CMS image name
        id: image-name
        run: |
          IMAGE_NAME=fxmk-cms-staging
          IMAGE_TAG=v${{ needs.version.outputs.version_with_sha }}
          echo "image_name=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "image=registry.fly.io/$IMAGE_NAME:$IMAGE_TAG" >> "$GITHUB_OUTPUT"
      - name: Build and push frontend Docker image
        run: |
          flyctl deploy \
            --app ${{ steps.image-name.outputs.image_name }} \
            --config apps/cms/fly.staging.toml \
            --build-only \
            --image-label ${{ steps.image-name.outputs.image_tag }} \
            --label org.opencontainers.image.version=${{ steps.image-name.outputs.image_tag }} \
            --push \
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  cms-deploy:
    name: "CMS: Deploy"
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs:
      - cms-build-push
      - cms-check-format
      - cms-lint
      - define-env
    environment:
      name: ${{ needs.define-env.outputs.environment }}-cms
      url: https://${{ needs.define-env.outputs.canonical_hostname_cms }}/
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-checkout: .
      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: ${{ env.FLYCTL_VERSION }}
      - name: Deploy CMS
        run: |
          flyctl deploy \
            --app ${{ needs.define-env.outputs.fly_app_cms }} \
            --config apps/cms/${{ needs.define-env.outputs.fly_config }} \
            --image ${{ needs.cms-build-push.outputs.image }} \
            --env MEDIA_S3_REGION=${{ env.MEDIA_S3_REGION }} \
            --env MEDIA_S3_BUCKET=${{ needs.define-env.outputs.s3_bucket }} \
            --env CACHE_REFRESH_TARGET_TYPE=fly \
            --env CACHE_REFRESH_TARGET_ARG=${{ needs.define-env.outputs.fly_app_frontend }},${{ env.FRONTEND_INTERNAL_PORT }} \
            --env IMAGEKIT_BASE_URL=${{ needs.define-env.outputs.imagekit_base_url }} \
            --env FRONTEND_BASE_URL=https://${{ needs.define-env.outputs.canonical_hostname_frontend }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  define-env:
    name: Define Environment
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      environment: ${{ steps.define-env.outputs.environment }}
      fly_config: ${{ steps.define-env.outputs.fly_config }}
      fly_app_frontend: ${{ steps.define-env.outputs.fly_app_frontend }}
      fly_app_cms: ${{ steps.define-env.outputs.fly_app_cms }}
      analytics_domain_frontend:
        ${{ steps.define-env.outputs.analytics_domain_frontend }}
      canonical_hostname_frontend:
        ${{ steps.define-env.outputs.canonical_hostname_frontend }}
      canonical_hostname_cms:
        ${{ steps.define-env.outputs.canonical_hostname_cms }}
      s3_bucket: ${{ steps.define-env.outputs.s3_bucket }}
      imagekit_base_url: ${{ steps.define-env.outputs.imagekit_base_url }}
    steps:
      - name: Define environment
        run: |
          environment=${{ inputs.environment || 'staging' }}
          echo "environment=$environment" >> "$GITHUB_OUTPUT"

          case $environment in
            production)
              echo "fly_config=fly.toml" >> "$GITHUB_OUTPUT"
              echo "fly_app_frontend=fxmk-frontend" >> "$GITHUB_OUTPUT"
              echo "fly_app_cms=fxmk-cms" >> "$GITHUB_OUTPUT"
              echo "canonical_hostname_frontend=www.fxmk.dev" >> "$GITHUB_OUTPUT"
              echo "canonical_hostname_cms=admin.fxmk.dev" >> "$GITHUB_OUTPUT"
              echo "s3_bucket=fxmk-media" >> "$GITHUB_OUTPUT"
              echo "imagekit_base_url=https://ik.imagekit.io/92jpwaahykk" >> "$GITHUB_OUTPUT"
              echo "analytics_domain_frontend=fxmk.dev" >> "$GITHUB_OUTPUT"
              ;;
            staging)
              echo "fly_config=fly.staging.toml" >> "$GITHUB_OUTPUT"
              echo "fly_app_frontend=fxmk-frontend-staging" >> "$GITHUB_OUTPUT"
              echo "fly_app_cms=fxmk-cms-staging" >> "$GITHUB_OUTPUT"
              echo "canonical_hostname_frontend=www.staging.fxmk.dev" >> "$GITHUB_OUTPUT"
              echo "canonical_hostname_cms=admin.staging.fxmk.dev" >> "$GITHUB_OUTPUT"
              echo "s3_bucket=fxmk-media-staging" >> "$GITHUB_OUTPUT"
              echo "imagekit_base_url=https://ik.imagekit.io/92jpwaahykk/staging" >> "$GITHUB_OUTPUT"
              ;;
          esac
        id: define-env

  create-release:
    name: Create release
    runs-on: ubuntu-latest
    if:
      github.event_name != 'pull_request' && (github.event.inputs.release == 'true' || needs.version.outputs.should_release == 'true')
    needs: [frontend-deploy, cms-deploy, version]
    permissions:
      contents: write
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup
        uses: ./.github/actions/setup
      - name: Install dependencies
        run: pnpm --filter releaser install
      - name: Create release
        run: |
          pnpm --filter releaser start publish ${{ needs.version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
